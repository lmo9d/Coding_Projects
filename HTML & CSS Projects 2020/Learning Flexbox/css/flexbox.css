
/* ================================= 
  Flexbox
==================================== */

.container {
	display: flex;        /*options: flex or in-line flex;  */


  	height: 450px;

  	flex-direction: row;    /*This flex-direction Property applies ONLY to the flex container!!

							 The default value for flex-direction is row. (flexbox will display in ROW)
							 
							 Use the value "row-reverse" To "reverse the direction" flex items in a row.
							 
							 The value "column" rotates the main axis so that flex items are laid out vertically.
							 
							 Usew the value "column-reverse",
							 so Like the row-reverse property, you can swap the top-to-bottom direction 
							 of a column .*/




	flex-wrap: wrap;  			/*The flex-wrap property is for flex containers only.
								  The flex container lays out flex items on a single line called a "flex line".
								  The flex container tries to fit all items on one flex line, 
								  even if causes its contents to overflow.

								  "nowrap"; every single item is fit to a single line
								  "wrap"; Item's wrap around Additional Lines
								  "wrap-reverse"; items wrap around additional lines IN Reverse.

								  The flex container can break flex items into multiple flex lines 
								  and allow them to wrap as needed.

								  With the flex-wrap property, you can control whether the flex container 
								  is a single-line or multi-line layout.

								  The value "wrap" breaks the flex items into multiple lines. */ 


	flex-flow: column wrap;		/*The Short-Hand Property for "flex-direction and flex-wrap.""
								
								flex-direction options [ row(the default), row-reverse; column,
								column-reverse; ] 

								flex-wrap options [ nowrap (default) , wrap,  wrap-reverse ]

								ShortHand Property: flex-flow: column wrap, or row nowrap or row-reverse wrap-reverse;

								 */ 


  

  	justify-content: flex-end;   /*You apply the justify-content property to flex containers only.

								The justify-content property lets you control the position and 
								alignment of flex Items on the main axis and how space should 
								be distributed in a flex container.
								
								The default value for justify-content is flex-start, which places items 
								towards the start of each flex line.
								
								To place items at the end of the flex line, set justify-content to flex-end.
								
								The value "center" places flex items in the center of the line, 
								with equal amounts of empty space between the line's start edge and 
								the first item, and between the end edge and the last item.
								
								The value "space-between" displays equal spacing between flex items.
								
								For equal spacing around every flex item, use the value "space-around".
								
								An Item with a margin set to "auto" will absorb any extra space around a 
								flex item and push other flex items into different positions. */







  	align-items:center; /* align-items aligns flex ITEMS vertically in the flex container.
						
						To align all flex items to the start of the cross axis,
						 use the "align-items: flex-start;" 
						
						"align-items: flex-end;"" packs the items toward the end of the cross axis.
						
						"align-items: center;"" perfectly centers items along the cross axis.   */





align-content: flex-start;  

							   /*You can use align-content to set how multiple lines are spaced apart from each other. 

								This property takes the following values:

								flex-start: Lines are packed at the top of the container.

								flex-end: Lines are packed at the bottom of the container.

								center: Lines are packed at the vertical center of the container.

								space-between: Lines display with equal spacing between them.

								space-around: Lines display with equal spacing around them.
								
								stretch: Lines are stretched to fit the container.
								
								This can be confusing, but align-content determines 
								the spacing between lines, while align-items determines 
								how the items as a whole are aligned within the container. 

								When there is only one line, align-content has no effect. */










/* TIP on Three ways to center-align elements using Flexbox:

1. Set the flex container's justify-content and align-items values to center:
						
2. Set the flex container's justify-content value to center, 
while setting the flex item's align-self value to center:
						
3. Set the flex-ITEMS's margin value to auto:  


FOR MORE PRACTICE WITH FLEXBOX, CHECK OUT www.flexboxfroggy.com
*/



}


.item {

  order: 4;  			/*The order property applies to Flex ITEMS ONLY.

						We can use the order property to change the order of any flex item.
						
						You can structure an HTML document for SEO or accessibility first, 
						then rearrange the content without ever editing the HTML.
						
						The default order of all flex items is 0.
						
						Order places flex items relative to the other items' order values.
						
						To place a flex item BEFORE another item, 
						it needs to have a lower Order VALUE than the item.
						
						To place a flex item AFTER another item, 
						it needs to have a higher order value than the item. */


  flex: 1 ; 


}


.item-1{
  align-self: flex-start;  /* Align-Self can only be used in Flex ITEMS!!
  							this property aligns the item at the start of the Flexbox row or column */ 
  

}


.item-2 {
  flex: 2;  
 
}



.item-4 {
  align-self: center;  /* The align-self property applies to flex items only.
 						
 						The  align-self: flex-start; aligns a flex item to the start of the cross axis.
						
						The align-self: flex-end; aligns a flex item to the end of the cross axis.
						
						The align-self: center; aligns a flex item to the center of the cross axis.
                          */

  
  flex-grow: 1;      /* The flex-grow property applies to flex items only.
						
						The flex-grow determines how much of the available space inside the flex container 
						an item should take up; it assigns more or less space to flex items.
						
						A flex-grow value of 1 expands flex items to take up the full space of a line.
						The higher the flex-grow value, the more an item grows relative to the other items.*/
  


  flex-basis: 100px;  /*flex-basis specifies the initial main size of a flex item.
						You set the initial size you want the flex items to be, 
						then flexbox evenly distributes the free space according that size. */



  flex: ;  /* flex is the Shorthand for flex-grow, flex-basis, & flex-shrink(flex-shrink is not commonly used)
			  
			  Using only one number value for flex sets the flex-grow value of an item.
			
			  The second and third values are optional in the flex shorthand.
			
			  Setting only one number value for flex automatically sets the flex-basis value to 0.



FOR MORE PRACTICE WITH FLEXBOX, CHECK OUT www.flexboxfroggy.com


			  */

}