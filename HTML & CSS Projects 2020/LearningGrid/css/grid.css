/* ===================================== 
   Grid Layout
======================================== */

.container {
	height: 100vh;
	display:grid;
	grid-template-columns: 1fr;
	grid-auto-rows: minmax(150px, auto) ;
	grid-gap: 10px;
  grid-template-areas:
    "header"
    "nav"
    "main"
    "aside"
    "footer";
  
}


header{
	grid-area:header;
}


nav{
  grid-area: nav;
}


main{
  grid-area: main;
}

aside {
  grid-area: aside;
}

footer{
  grid-area: footer;
}


@media(min-width: 768px) {
  .container {
    grid-template-columns: 1fr 2fr 1fr;
    grid-template-rows: 100px minmax(150px, auto) 100px;
    grid-template-areas:
      "header header header"
      "nav main aside"
      "footer footer footer";
}

}

@media (min-width: 992px) {
  .container {
    grid-template-areas: 
  "header header header"
  "nav main aside"
  "nav footer footer"
}

}
--------------------
 
/* ===================================== 
   Learning Grid 
======================================== */


.container {            
    display: grid;       /* options: ; grid OR  inline-grid;  */


    grid-template-rows: 20% 20% 20% 20% 20%;        /* options: ; grid OR  inline-grid;    
                                                               */ 


    grid-template-columns: 20% 20% 20% 20% 20%;  /* options: ; grid OR  inline-grid;  
                                                  
                                                  grid-templates don't just accept values in percentages, 
                                                  but also length units like PIXELS and EMS, & PERCENTAGES. 
                                                  You can even mix different units together.*/




                                             /*  This sets up grid with five columns, each 20% of the full width, 
                                              and five rows, each 20% of the full height. 
                                              Each rule has five values which create five columns, 
                                              each set to 20% of the overall width of the garden.
                                                                                            */


grid-template: 50% 50% / 200px;                /* a shorthand property that combines 
                                                 grid-template-rows & grid-template-columns.  
                                                            
                                                grid-template = <grid-template-rows >  /  <grid-template-columns>:;

                              
                                                 For example, grid-template: 50% 50% / 200px; 
                                                 will create a grid with 2 rows that are 50% each, 
                                                 and 1 column that is 200 pixels wide
                                                                                                                 */


grid-template-columns: 1fr 5fr  ; 
                                              /*  Grid also introduces a new unit, the fractional "fr". 
                                              Each fr unit allocates one share of the available space.
                                              For example, if two elements are set to 1fr and 3fr respectively, 
                                              the space is divided into 4 equal shares; 
                                              the first element occupies 1/4 and the second element 3/4 of any leftover space.
                                                                                                      */





grid-template-columns: repeat(5, 20%; ); /*   
                                            Specifying a bunch of columns with identical widths can get tedious.
                                             Luckily there's a repeat function to help with that.

                                            For example, we previously defined 5 ,  20% columns 
                                            with the rule grid-template-columns: 20% 20% 20% 20% 20%;. 

                                            This can be simplified as grid-template-columns: repeat(5, 20%);

                                            "repeat( );" being the key function.

                                            */




    grid-column-start: 3;    /* specifies a Grid Item's Start Position within the Grid COLUMNS 
                                enter an INTEGER (number) or a span of INTEGERS (Ex: 3)  or (span 5;) 

                                In the example above: the 3rd Vertical Border from the LEFT of the grid */


        
    grid-column-end: 5;      /* Specifies a Grid Item's END Position within the Grid COLUMNS 
                                enter an INTEGER (number) or a SPAN of INTEGERS  (Ex: 3) or (span 5;)  
                                The INTEGERS can be positive or negative: 
                                However, if you use the Keywords "span:; , it can only use 
                                Positve Integers.                                
                                                  */ 



   grid-column: 4 / 6;      /* Typing both grid-column-start and grid-column-end every time can 
                              get tiring. 

                              Fortunately, "grid-column" is a shorthand property that can 
                              accept both values at once, separated by a slash. 

                              grid-column:  [grid-column-start value ]  / [grid-column-end value] ;  

                              For example, grid-column: 4 / 6; will set the grid item to start 
                              on the 2nd vertical grid line and end on the 4th grid line.
                              
                              The "span:  ; "  also works here, you'll format it as.. span: 4 / 6 ;   */ 

---------------------------

  grid-row-start: 4;          /* grid-row-start works much like grid-column-start except along the
                              vertical axis.

                              specifies a Grid Item's Start Position within the Grid ROWS 
                              enter an INTEGER (number) or a span of INTEGERS (Ex: 3)  or (span 5;) 


                              One of the things that sets CSS GRIDS  apart from FLEXBOX is 
                              that you can easily position items in two dimensions: columns and rows.*/


grid-row-end: 8;               /* grid-row-end works much like grid-column-end except along the
                              vertical axis.

                              SPECIFIED a Grid Item's END Position within the Grid ROWS 
                              enter an INTEGER (number) or a span of INTEGERS (Ex: 3)  or (span 5;) 


                              One of the things that sets CSS GRIDS  apart from FLEXBOX is 
                              that you can easily position items in two dimensions: columns and rows.*/
  


grid-row: 4 / 6;              /* Typing both grid-row-start and grid-row-end every time can 
                              get tiring. 

                              Fortunately, "grid-row" is a shorthand property that can 
                              accept both values at once, separated by a slash. 

                              grid-row:  [grid-row-start value ]  / [grid-row-end value] ;  

                              For example, grid-row: 4 / 6; will set the grid item to start 
                              on the 4 th  horizontal grid line and end on the 6th grid line.
                              
                              The "span:  ; "  also works here, you'll format it as.. span: 4 / 6 ;   */




grid-area:  ;                /* YET Another SHORTHAND PROPERTY for Both grid-row & grid-column

                               accepts 4 values separated by slashes: 
                               grid-row-start, grid-column-start, grid-row-end, followed by grid-column-end.. 

                                 
Ex: grid-area: griw-row-start value /  grid-column-start value / grid-row-end value / grid-column-end value;

                               One example of this would be: ;

                               grid-area: 1 / 1 / 3 / 6; 


                               grid-area: SPECIFIED a Grid Item's END Position and SIZE within the Grid ; */



order: 4;                    /* Specifies the ORDER of the Grid Item . By default, all items have an
                               order of "0". However you can change the Order of the Item using
                               Positve Values and Negative Values ;  
                                  */


So -- Basically, you want to use grid-row:; & grid-column or grid-area:; to save time as
(all 3 are Shorthand properties)










